{"version":3,"sources":["store/actions/balance.ts","store/actions/coupons.ts","store/reducers/balance.ts","store/actions/history.ts","store/reducers/coupons.ts","store/reducers/history.ts","helpers/axios.ts","store/sagas/balance.ts","store/sagas/coupons.ts","store/sagas/history.ts","store/sagas/index.ts","store/index.ts","helpers/utils.ts","components/UserCoupons/index.tsx","components/PointsBalance/PointsWorth.tsx","components/PointsBalance/index.tsx","components/PointsHistory/index.tsx","components/PointsRedeem/index.tsx","components/App.tsx","helpers/antd.ts","index.tsx"],"names":["EPointsBalanceTypes","EUserCouponsTypes","PointsBalanceActions","payload","type","READ_POINTS_BALANCE","SET_POINTS_BALANCE","REDEEM_POINTS","balance","action","data","EHistoryEntriesTypes","UserCouponsActions","READ_USER_COUPONS","SET_USER_COUPONS","coupons","SET_USER_COUPON","index","findIndex","c","id","clonedCoupons","cloneDeep","HistoryEntriesActions","READ_HISTORY_ENTRIES","SET_HISTORY_ENTRIES","historyEntries","SET_HISTORY_ENTRY","clonedEntries","axios","create","baseURL","wpApiSettings","root","timeout","headers","nonce","readPointsBalanceSaga","redeemPointsSaga","processingCB","successCB","failCB","call","axiosInstance","get","response","put","error","points","post","page","actionListeners","takeEvery","readUserCouponsSaga","params","readHistoryEntriesSaga","rootSaga","all","history","bindMiddleware","middlewares","composeWithDevTools","require","applyMiddleware","getPathPrefix","lpfwMyPoints","page_url","replace","location","origin","readUserCoupons","pathPrefix","connect","store","dispatch","actions","bindActionCreators","props","cart_url","labels","useState","loadCoupons","setLoadCoupons","loading","setLoading","currentPage","setCurrentPage","total","setTotal","useEffect","active","columns","title","coupon_code","dataIndex","key","amount","redeem_date","expire_date","render","value","record","href","code","apply_coupon","className","reward_coupons","length","to","click_to_redeem","pagination","dataSource","defaultCurrent","hideOnSinglePage","current","pageSize","showSizeChanger","onChange","no_coupons_found","PointsWorth","points_expiry_note","worth","expiry","dangerouslySetInnerHTML","__html","points_worth","toLocaleString","style","fontSize","readPointsBalance","points_balance","readHistoryEntries","entries","defaults","date","activity","related","label","rel_link","target","points_history","redeemPoints","currency_ratio","redeem_ratio","currency_symbol","coupon_expire_period","minimum_points_redeem","maximum_points_redeem","decimals","pointsValue","setPointsValue","worthValue","setWorthValue","worthStep","maxPoints","Math","min","redeem_points","redeem_desc","gutter","span","enter_points","max","step","parseInt","temp","isNaN","toFixed","toString","enter_amount","parseFloat","floor","size","onClick","message","success","disabled","redeem_button","view_redeemed","additional_info","TabPane","Tabs","App","tab","setTab","urlParams","URLSearchParams","useLocation","search","useHistory","urlTab","activeKey","defaultActiveKey","onTabClick","push","getAntdLocale","app_lang","enGB","includes","frFR","ruRU","ptBR","enUS","initialState","undefined","sagaMiddleware","createSagaMiddleware","createStore","combineReducers","pointsBalanceReducer","userCouponsReducer","historyEntriesReducer","run","initializeStore","document","querySelectorAll","forEach","domContainer","ReactDOM","locale","path","component"],"mappings":"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","file":"static/js/main.66c287ed.chunk.js","sourcesContent":["// #region [Imports] ===========================================================================================\n\nimport IPointsBalance from \"../../types/balance\";\n\n// #endregion [Imports]\n\n// #region [Action Payloads] ===========================================================================================\n\nexport interface IReadStorePointsBalanceActionPayload {\n    processingCB?: () => void;\n    successCB?: (arg: any) => void;\n    failCB?: (arg: any) => void;\n}\nexport interface IRedeemPointsActionPayload {\n    points: number;\n    processingCB?: () => void;\n    successCB?: (arg: any) => void;\n    failCB?: (arg: any) => void;\n}\nexport interface ISetStorePointsBalanceActionPayload {\n    data: IPointsBalance;\n}\n\n// #endregion [Action Payloads]\n\n// #region [Action Types] ==============================================================================================\n\nexport enum EPointsBalanceTypes {\n    READ_POINTS_BALANCE = \"READ_POINTS_BALANCE\",\n    SET_POINTS_BALANCE = \"SET_POINTS_BALANCE\",\n    REDEEM_POINTS = \"REDEEM_POINTS\",\n}\n\n// #endregion [Action Types]\n\n// #region [Action Creators] ===========================================================================================\n\nexport const PointsBalanceActions = {\n    readPointsBalance: (payload: IReadStorePointsBalanceActionPayload) => ({\n        type: EPointsBalanceTypes.READ_POINTS_BALANCE,\n        payload,\n    }),\n    setPointsBalance: (payload: ISetStorePointsBalanceActionPayload) => ({\n        type: EPointsBalanceTypes.SET_POINTS_BALANCE,\n        payload,\n    }),\n    redeemPoints: (payload: IRedeemPointsActionPayload) => ({\n        type: EPointsBalanceTypes.REDEEM_POINTS,\n        payload,\n    }),\n};\n\n// #endregion [Action Creators]\n","// #region [Imports] ===========================================================================================\n\nimport IUserCoupon from \"../../types/coupons\";\n\n// #endregion [Imports]\n\n// #region [Action Payloads] ===========================================================================================\n\nexport interface IReadStoreUserCouponsActionPayload {\n    page: number | null;\n    processingCB?: () => void;\n    successCB?: (arg: any) => void;\n    failCB?: (arg: any) => void;\n}\nexport interface ISetStoreUserCouponsActionPayload {\n    data: IUserCoupon[];\n}\nexport interface ISetStoreUserCouponActionPayload {\n    data: IUserCoupon;\n}\n\n// #endregion [Action Payloads]\n\n// #region [Action Types] ==============================================================================================\n\nexport enum EUserCouponsTypes {\n    READ_USER_COUPONS = \"READ_USER_COUPONS\",\n    SET_USER_COUPONS = \"SET_USER_COUPONS\",\n    SET_USER_COUPON = \"SET_USER_COUPON\",\n}\n\n// #endregion [Action Types]\n\n// #region [Action Creators] ===========================================================================================\n\nexport const UserCouponsActions = {\n    readUserCoupons: (payload: IReadStoreUserCouponsActionPayload) => ({\n        type: EUserCouponsTypes.READ_USER_COUPONS,\n        payload,\n    }),\n    setUserCoupons: (payload: ISetStoreUserCouponsActionPayload) => ({\n        type: EUserCouponsTypes.SET_USER_COUPONS,\n        payload,\n    }),\n    setUserCoupon: (payload: ISetStoreUserCouponActionPayload) => ({\n        type: EUserCouponsTypes.SET_USER_COUPON,\n        payload,\n    }),\n};\n\n// #endregion [Action Creators]\n","// #region [Imports] ===================================================================================================\n\n// Actions\nimport {\n    ISetStorePointsBalanceActionPayload,\n    EPointsBalanceTypes,\n} from \"../actions/balance\";\n\n// Types\nimport IPointsBalance from \"../../types/balance\";\n\n// #endregion [Imports]\n\n// #region [Reducer] ===================================================================================================\n\nexport default (\n    balance: IPointsBalance | null = null,\n    action: { type: string; payload: any }\n) => {\n    switch (action.type) {\n        case EPointsBalanceTypes.SET_POINTS_BALANCE: {\n            const {\n                data,\n            } = action.payload as ISetStorePointsBalanceActionPayload;\n            return data;\n        }\n\n        default:\n            return balance;\n    }\n};\n\n// #endregion [Reducer]\n","// #region [Imports] ===========================================================================================\n\nimport IHistoryEntry from \"../../types/history\";\n\n// #endregion [Imports]\n\n// #region [Action Payloads] ===========================================================================================\n\nexport interface IReadStoreHistoryEntriesActionPayload {\n    page: number | null;\n    processingCB?: () => void;\n    successCB?: (arg: any) => void;\n    failCB?: (arg: any) => void;\n}\nexport interface ISetStoreHistoryEntriesActionPayload {\n    data: IHistoryEntry[];\n}\nexport interface ISetStoreHistoryEntryActionPayload {\n    data: IHistoryEntry;\n}\n\n// #endregion [Action Payloads]\n\n// #region [Action Types] ==============================================================================================\n\nexport enum EHistoryEntriesTypes {\n    READ_HISTORY_ENTRIES = \"READ_HISTORY_ENTRIES\",\n    SET_HISTORY_ENTRIES = \"SET_HISTORY_ENTRIES\",\n    SET_HISTORY_ENTRY = \"SET_HISTORY_ENTRY\",\n}\n\n// #endregion [Action Types]\n\n// #region [Action Creators] ===========================================================================================\n\nexport const HistoryEntriesActions = {\n    readHistoryEntries: (payload: IReadStoreHistoryEntriesActionPayload) => ({\n        type: EHistoryEntriesTypes.READ_HISTORY_ENTRIES,\n        payload,\n    }),\n    setHistoryEntries: (payload: ISetStoreHistoryEntriesActionPayload) => ({\n        type: EHistoryEntriesTypes.SET_HISTORY_ENTRIES,\n        payload,\n    }),\n    setHistoryEntry: (payload: ISetStoreHistoryEntryActionPayload) => ({\n        type: EHistoryEntriesTypes.SET_HISTORY_ENTRY,\n        payload,\n    }),\n};\n\n// #endregion [Action Creators]\n","// #region [Imports] ===================================================================================================\n\n// Libs\nimport cloneDeep from \"lodash/cloneDeep\";\n\n// Types\nimport IUserCoupon from \"../../types/coupons\";\n\n// Actions\nimport {\n    ISetStoreUserCouponActionPayload,\n    ISetStoreUserCouponsActionPayload,\n    EUserCouponsTypes,\n} from \"../actions/coupons\";\n\n// #endregion [Imports]\n\n// #region [Reducer] ===================================================================================================\n\nexport default (\n    coupons: IUserCoupon[] = [],\n    action: { type: string; payload: any }\n) => {\n    switch (action.type) {\n        case EUserCouponsTypes.SET_USER_COUPONS: {\n            const {\n                data,\n            } = action.payload as ISetStoreUserCouponsActionPayload;\n            return data;\n        }\n\n        case EUserCouponsTypes.SET_USER_COUPON: {\n            const { data } = action.payload as ISetStoreUserCouponActionPayload;\n            const index = coupons.findIndex((c) => c.id === data.id);\n\n            if (index < 0) return [data, ...coupons];\n\n            const clonedCoupons = cloneDeep(coupons);\n            clonedCoupons[index] = { ...clonedCoupons[index], ...data };\n\n            return clonedCoupons;\n        }\n\n        default:\n            return coupons;\n    }\n};\n\n// #endregion [Reducer]\n","// #region [Imports] ===================================================================================================\n\n// Libs\nimport cloneDeep from \"lodash/cloneDeep\";\n\n// Types\nimport IHistoryEntry from \"../../types/history\";\n\n// Actions\nimport {\n    ISetStoreHistoryEntriesActionPayload,\n    ISetStoreHistoryEntryActionPayload,\n    EHistoryEntriesTypes,\n} from \"../actions/history\";\n\n// #endregion [Imports]\n\n// #region [Reducer] ===================================================================================================\n\nexport default (\n    historyEntries: IHistoryEntry[] = [],\n    action: { type: string; payload: any }\n) => {\n    switch (action.type) {\n        case EHistoryEntriesTypes.SET_HISTORY_ENTRIES: {\n            const {\n                data,\n            } = action.payload as ISetStoreHistoryEntriesActionPayload;\n            return data;\n        }\n\n        case EHistoryEntriesTypes.SET_HISTORY_ENTRY: {\n            const {\n                data,\n            } = action.payload as ISetStoreHistoryEntryActionPayload;\n            const index = historyEntries.findIndex((c) => c.id === data.id);\n\n            if (index < 0) return [data, ...historyEntries];\n\n            const clonedEntries = cloneDeep(historyEntries);\n            clonedEntries[index] = { ...clonedEntries[index], ...data };\n\n            return clonedEntries;\n        }\n\n        default:\n            return historyEntries;\n    }\n};\n\n// #endregion [Reducer]\n","// #region [Imports] ===================================================================================================\n\nimport axios from \"axios\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var wpApiSettings: any;\n\n// #endregion [Variables]\n\nexport default axios.create({\n    baseURL: wpApiSettings.root,\n    timeout: 30000,\n    headers: { \"X-WP-Nonce\": wpApiSettings.nonce },\n});\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport \"cross-fetch/polyfill\";\nimport { put, call, takeEvery } from \"redux-saga/effects\";\n\n// Actions\nimport {\n    IReadStorePointsBalanceActionPayload,\n    EPointsBalanceTypes,\n    PointsBalanceActions,\n    IRedeemPointsActionPayload,\n} from \"../actions/balance\";\nimport { UserCouponsActions } from \"../actions/coupons\";\nimport { HistoryEntriesActions } from \"../actions/history\";\n\n// Helpers\nimport axiosInstance from \"../../helpers/axios\";\n\n// #endregion [Imports]\n\n// #region [Sagas] =====================================================================================================\n\nexport function* readPointsBalanceSaga(action: {\n    type: string;\n    payload: IReadStorePointsBalanceActionPayload;\n}): any {\n    const { processingCB, successCB, failCB } = action.payload;\n\n    try {\n        if (typeof processingCB === \"function\") processingCB();\n\n        const response = yield call(() =>\n            axiosInstance.get(`loyalty-program/v1/mypoints`)\n        );\n\n        if (response && response.data) {\n            yield put(\n                PointsBalanceActions.setPointsBalance({ data: response.data })\n            );\n\n            if (typeof successCB === \"function\") successCB(response);\n        }\n    } catch (e) {\n        if (typeof failCB === \"function\") failCB({ error: e });\n    }\n}\n\nexport function* redeemPointsSaga(action: {\n    type: string;\n    payload: IRedeemPointsActionPayload;\n}): any {\n    const { points, processingCB, successCB, failCB } = action.payload;\n\n    try {\n        if (typeof processingCB === \"function\") processingCB();\n\n        const response = yield call(() =>\n            axiosInstance.post(`loyalty-program/v1/mypoints/redeem`, {\n                points: points,\n            })\n        );\n\n        if (response && response.data) {\n            yield put(\n                PointsBalanceActions.setPointsBalance({\n                    data: response.data.balance,\n                })\n            );\n            yield put(UserCouponsActions.readUserCoupons({ page: 1 }));\n            yield put(HistoryEntriesActions.readHistoryEntries({ page: 1 }));\n\n            if (typeof successCB === \"function\") successCB(response);\n        }\n    } catch (e) {\n        if (typeof failCB === \"function\") failCB({ error: e });\n    }\n}\n\n// #endregion [Sagas]\n\n// #region [Action Listeners] ==========================================================================================\n\nexport const actionListeners = [\n    takeEvery(EPointsBalanceTypes.READ_POINTS_BALANCE, readPointsBalanceSaga),\n    takeEvery(EPointsBalanceTypes.REDEEM_POINTS, redeemPointsSaga),\n];\n\n// #endregion [Action Listeners]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport \"cross-fetch/polyfill\";\nimport { put, call, takeEvery } from \"redux-saga/effects\";\n\n// Actions\nimport {\n    IReadStoreUserCouponsActionPayload,\n    EUserCouponsTypes,\n    UserCouponsActions,\n} from \"../actions/coupons\";\n\n// Helpers\nimport axiosInstance from \"../../helpers/axios\";\n\n// #endregion [Imports]\n\n// #region [Sagas] =====================================================================================================\n\nexport function* readUserCouponsSaga(action: {\n    type: string;\n    payload: IReadStoreUserCouponsActionPayload;\n}): any {\n    const { page, processingCB, successCB, failCB } = action.payload;\n\n    try {\n        if (typeof processingCB === \"function\") processingCB();\n\n        const response = yield call(() =>\n            axiosInstance.get(`loyalty-program/v1/mypoints/coupons`, {\n                params: {\n                    page: page,\n                },\n            })\n        );\n\n        if (response && response.data) {\n            yield put(\n                UserCouponsActions.setUserCoupons({ data: response.data })\n            );\n\n            if (typeof successCB === \"function\") successCB(response);\n        }\n    } catch (e) {\n        if (typeof failCB === \"function\") failCB({ error: e });\n    }\n}\n\n// #endregion [Sagas]\n\n// #region [Action Listeners] ==========================================================================================\n\nexport const actionListeners = [\n    takeEvery(EUserCouponsTypes.READ_USER_COUPONS, readUserCouponsSaga),\n];\n\n// #endregion [Action Listeners]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport \"cross-fetch/polyfill\";\nimport { put, call, takeEvery } from \"redux-saga/effects\";\n\n// Actions\nimport {\n    IReadStoreHistoryEntriesActionPayload,\n    EHistoryEntriesTypes,\n    HistoryEntriesActions,\n} from \"../actions/history\";\n\n// Helpers\nimport axiosInstance from \"../../helpers/axios\";\n\n// #endregion [Imports]\n\n// #region [Sagas] =====================================================================================================\n\nexport function* readHistoryEntriesSaga(action: {\n    type: string;\n    payload: IReadStoreHistoryEntriesActionPayload;\n}): any {\n    const { page, processingCB, successCB, failCB } = action.payload;\n\n    try {\n        if (typeof processingCB === \"function\") processingCB();\n\n        const response = yield call(() =>\n            axiosInstance.get(`loyalty-program/v1/mypoints/history`, {\n                params: {\n                    page: page,\n                },\n            })\n        );\n\n        if (response && response.data) {\n            yield put(\n                HistoryEntriesActions.setHistoryEntries({ data: response.data })\n            );\n\n            if (typeof successCB === \"function\") successCB(response);\n        }\n    } catch (e) {\n        if (typeof failCB === \"function\") failCB({ error: e });\n    }\n}\n\n// #endregion [Sagas]\n\n// #region [Action Listeners] ==========================================================================================\n\nexport const actionListeners = [\n    takeEvery(\n        EHistoryEntriesTypes.READ_HISTORY_ENTRIES,\n        readHistoryEntriesSaga\n    ),\n];\n\n// #endregion [Action Listeners]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport { all } from \"redux-saga/effects\";\n\n// Sagas\nimport * as balance from \"./balance\";\nimport * as coupons from \"./coupons\";\nimport * as history from \"./history\";\n\n// #endregion [Imports]\n\n// #region [Root Saga] =================================================================================================\n\nexport default function* rootSaga() {\n    yield all([\n        ...balance.actionListeners,\n        ...coupons.actionListeners,\n        ...history.actionListeners,\n    ]);\n}\n\n// #endregion [Root Saga]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\n// Types\nimport IStore from \"../types/store\";\n\n// Reducers\nimport pointsBalanceReducer from \"./reducers/balance\";\nimport userCouponsReducer from \"./reducers/coupons\";\nimport historyEntriesReducer from \"./reducers/history\";\n\n// Saga\nimport rootSaga from \"./sagas\";\n\n// #endregion [Imports]\n\n// #region [Store] =====================================================================================================\n\n/**\n * !Important\n * Comment this function out when releasing for production.\n */\nconst bindMiddleware = (middlewares: any[]) => {\n    const { composeWithDevTools } = require(\"redux-devtools-extension\");\n    return composeWithDevTools(applyMiddleware(...middlewares));\n};\n\nexport default function initializeStore(\n    initialState: IStore | undefined = undefined\n) {\n    const sagaMiddleware = createSagaMiddleware();\n\n    const store = createStore(\n        combineReducers({\n            balance: pointsBalanceReducer,\n            coupons: userCouponsReducer,\n            history: historyEntriesReducer,\n        }),\n        initialState,\n        bindMiddleware([sagaMiddleware])\n    );\n\n    sagaMiddleware.run(rootSaga);\n\n    return store;\n}\n\n// #endregion [Store]\n","// #region [Variables] =================================================================================================\n\ndeclare var lpfwMyPoints: any;\ndeclare var location: any;\n\n// #endregion [Variables]\n\nexport const getPathPrefix = function () {\n    return lpfwMyPoints.page_url.replace(location.origin, \"\");\n};\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Table, Pagination, Button, Skeleton } from \"antd\";\n\n// Actions\nimport { UserCouponsActions } from \"../../store/actions/coupons\";\n\n// Types\nimport IStore from \"../../types/store\";\nimport IUserCoupon from \"../../types/coupons\";\n\n// Helpers\nimport { getPathPrefix } from \"../../helpers/utils\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var lpfwMyPoints: any;\n\nconst { readUserCoupons } = UserCouponsActions;\nconst pathPrefix = getPathPrefix();\n\n// #endregion [Variables]\n\n// #region [Interfaces]=================================================================================================\n\ninterface IActions {\n    readUserCoupons: typeof readUserCoupons;\n}\n\ninterface IProps {\n    coupons: IUserCoupon[];\n    actions: IActions;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst UserCoupons = (props: IProps) => {\n    const { coupons, actions } = props;\n    const { cart_url, labels } = lpfwMyPoints;\n    const [loadCoupons, setLoadCoupons]: [boolean, any] = useState(false);\n    const [loading, setLoading]: [boolean, any] = useState(false);\n    const [currentPage, setCurrentPage]: [number, any] = useState(1);\n    const [total, setTotal]: [number, any] = useState(0);\n\n    useEffect(() => {\n        actions.readUserCoupons({\n            page: 1,\n            successCB: (response) => {\n                setTotal(response.headers[\"x-total\"]);\n                setLoadCoupons(true);\n            },\n        });\n    }, []);\n\n    if (!loadCoupons) return <Skeleton active />;\n\n    const columns = [\n        {\n            title: `${labels.coupon_code}`,\n            dataIndex: \"code\",\n            key: \"code\",\n        },\n        {\n            title: `${labels.amount}`,\n            dataIndex: \"amount\",\n            key: \"amount\",\n        },\n        {\n            title: `${labels.redeem_date}`,\n            dataIndex: \"date_created\",\n            key: \"date_created\",\n        },\n        {\n            title: `${labels.expire_date}`,\n            dataIndex: \"date_expire\",\n            key: \"date_expire\",\n        },\n        {\n            title: `${labels.action}`,\n            dataIndex: \"code\",\n            key: \"code\",\n            render: (value: string, record: IUserCoupon) => (\n                <Button\n                    href={`${cart_url}?lpfw_coupon=${record.code}`}\n                    type=\"primary\"\n                >\n                    {labels.apply_coupon}\n                </Button>\n            ),\n        },\n    ];\n\n    /**\n     * Handle pagination click event.\n     *\n     * @param page\n     */\n    const handlePagination = (page: number) => {\n        setCurrentPage(page);\n        setLoading(true);\n        actions.readUserCoupons({\n            page: page,\n            successCB: () => setLoading(false),\n        });\n    };\n\n    return (\n        <div className=\"user-coupons\">\n            <h3>{labels.reward_coupons}</h3>\n            {coupons.length ? (\n                <>\n                    <div className=\"redeem-points\">\n                        <p>\n                            <Link to={`${pathPrefix}lpfw-my-points/?tab=redeem`}>\n                                {labels.click_to_redeem} \n                            </Link>\n                        </p>\n                    </div>\n                    <Table\n                        loading={loading}\n                        pagination={false}\n                        dataSource={coupons}\n                        columns={columns}\n                    />\n                    {total ? (\n                        <Pagination\n                            defaultCurrent={currentPage}\n                            hideOnSinglePage={true}\n                            current={currentPage}\n                            total={total}\n                            pageSize={10}\n                            showSizeChanger={false}\n                            onChange={handlePagination}\n                        />\n                    ) : null}\n                </>\n            ) : (\n                <p>\n                    {labels.no_coupons_found}{\" \"}\n                    <Link to={`${pathPrefix}lpfw-my-points/?tab=redeem`}>\n                        {labels.click_to_redeem}\n                    </Link>\n                </p>\n            )}\n        </div>\n    );\n};\n\nconst mapStateToProps = (store: IStore) => ({\n    coupons: store.coupons,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({ readUserCoupons }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserCoupons);\n\n// #endregion [Component]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\n\n// Types\nimport IPointsBalance from \"../../types/balance\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var lpfwMyPoints: any;\n\n// #endregion [Variables]\n\n// #region [Interfaces]=================================================================================================\n\ninterface IProps {\n    balance: IPointsBalance;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst PointsWorth = (props: IProps) => {\n    const { balance } = props;\n    const { labels, points_expiry_note } = lpfwMyPoints;\n\n    const { points, worth, expiry } = balance;\n\n    return (\n        <p>\n            <span\n                className=\"points-worth-text\"\n                dangerouslySetInnerHTML={{\n                    __html: labels.points_worth\n                        .replace(\"{p}\", points.toLocaleString())\n                        .replace(\"{w}\", worth),\n                }}\n            />\n            <br />\n            {0 < points && expiry ? (\n                <span \n                    className=\"points-expiry-text\" \n                    style={ {fontSize: 13} }\n                >\n                    <em>{ points_expiry_note.replace('{date_expire}', expiry) }</em>\n                </span>\n            ): null}\n        </p>\n    );\n};\n\nexport default PointsWorth;\n\n// #endregion [Component]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React, { useEffect, useState } from \"react\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Skeleton } from \"antd\";\n\n// Components\nimport UserCoupons from \"../UserCoupons\";\nimport PointsWorth from \"./PointsWorth\";\n\n// Actions\nimport { PointsBalanceActions } from \"../../store/actions/balance\";\n\n// Types\nimport IStore from \"../../types/store\";\nimport IPointsBalance from \"../../types/balance\";\n\n// Helpers\nimport { getPathPrefix } from \"../../helpers/utils\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var lpfwMyPoints: any;\n\nconst { readPointsBalance } = PointsBalanceActions;\n\n// #endregion [Variables]\n\n// #region [Interfaces]=================================================================================================\n\ninterface IActions {\n    readPointsBalance: typeof readPointsBalance;\n}\n\ninterface IProps {\n    balance: IPointsBalance;\n    actions: IActions;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst PointsBalance = (props: IProps) => {\n    const { balance, actions } = props;\n    const { labels } = lpfwMyPoints;\n    const [loadCoupons, setLoadCoupons]: [boolean, any] = useState(false);\n\n    useEffect(() => {\n        actions.readPointsBalance({});\n    }, []);\n\n    if (!balance) {\n        return <Skeleton active />;\n    }\n\n    return (\n        <>\n            <div className=\"points-balance\">\n                <h3>{labels.points_balance}</h3>\n                <PointsWorth balance={balance} />\n            </div>\n            <UserCoupons />\n        </>\n    );\n};\n\nconst mapStateToProps = (store: IStore) => ({\n    balance: store.balance,\n    coupons: store.coupons,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({ readPointsBalance }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PointsBalance);\n\n// #endregion [Component]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React, { useEffect, useState } from \"react\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Table, Pagination } from \"antd\";\nimport {defaults} from \"lodash\";\n\n// Actions\nimport { HistoryEntriesActions } from \"../../store/actions/history\";\n\n// Types\nimport IStore from \"../../types/store\";\nimport IHistoryEntry from \"../../types/history\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var lpfwMyPoints: any;\n\nconst { readHistoryEntries } = HistoryEntriesActions;\n\n// #endregion [Variables]\n\n// #region [Interfaces]=================================================================================================\n\ninterface IActions {\n    readHistoryEntries: typeof readHistoryEntries;\n}\n\ninterface IProps {\n    entries: IHistoryEntry[];\n    actions: IActions;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst PointsHistory = (props: IProps) => {\n    const { entries, actions } = defaults(props, {entries: []});\n    const { labels } = lpfwMyPoints;\n    const [loading, setLoading]: [boolean, any] = useState(true);\n    const [currentPage, setCurrentPage]: [number, any] = useState(1);\n    const [total, setTotal]: [number, any] = useState(0);\n\n    const columns = [\n        {\n            title: `${labels.date}`,\n            dataIndex: \"date\",\n            key: \"date\",\n        },\n        {\n            title: `${labels.activity}`,\n            dataIndex: \"activity\",\n            key: \"activity\",\n        },\n        {\n            title: `${labels.points}`,\n            dataIndex: \"points\",\n            key: \"points\",\n            render: (points: number) => points.toLocaleString(),\n        },\n        {\n            title: `${labels.related}`,\n            dataIndex: \"rel_label\",\n            key: \"rel_label\",\n            render: (label: string, record: IHistoryEntry) => (\n                <>\n                    {record.rel_link ? (\n                        <a href={record.rel_link} target=\"_blank\">\n                            {label}\n                        </a>\n                    ) : (\n                        <span>{label}</span>\n                    )}\n                </>\n            ),\n        },\n    ];\n\n    useEffect(() => {\n        if (entries.length) return;\n        actions.readHistoryEntries({\n            page: 1,\n            successCB: (response) => {\n                setTotal(response.headers[\"x-total\"]);\n                setLoading(false);\n            },\n        });\n    }, []);\n\n    /**\n     * Handle pagination click event.\n     *\n     * @param page\n     */\n    const handlePagination = (page: number) => {\n        setCurrentPage(page);\n        setLoading(true);\n        actions.readHistoryEntries({\n            page: page,\n            successCB: () => setLoading(false),\n        });\n    };\n\n    return (\n        <div className=\"user-points-history\">\n            <h3>{labels.points_history}</h3>\n            <Table\n                loading={loading}\n                pagination={false}\n                dataSource={entries}\n                columns={columns}\n            />\n            {total && !loading ? (\n                <Pagination\n                    defaultCurrent={currentPage}\n                    hideOnSinglePage={true}\n                    current={currentPage}\n                    total={total}\n                    pageSize={10}\n                    showSizeChanger={false}\n                    onChange={handlePagination}\n                />\n            ) : null}\n        </div>\n    );\n};\n\nconst mapStateToProps = (store: IStore) => ({ entries: store.history });\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    actions: bindActionCreators({ readHistoryEntries }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PointsHistory);\n\n// #endregion [Component]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Row, Col, Form, InputNumber, Button, Skeleton, message } from \"antd\";\n\n// CSS\nimport \"./index.scss\";\n\n// Components\nimport PointsWorth from \"../PointsBalance/PointsWorth\";\n\n// Actions\nimport { PointsBalanceActions } from \"../../store/actions/balance\";\n\n// Types\nimport IStore from \"../../types/store\";\nimport IPointsBalance from \"../../types/balance\";\n\n// Helpers\nimport { getPathPrefix } from \"../../helpers/utils\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var lpfwMyPoints: any;\n\nconst { readPointsBalance, redeemPoints } = PointsBalanceActions;\nconst pathPrefix = getPathPrefix();\n\n// #endregion [Variables]\n\n// #region [Interfaces]=================================================================================================\n\ninterface IActions {\n    readPointsBalance: typeof readPointsBalance;\n    redeemPoints: typeof redeemPoints;\n}\n\ninterface IProps {\n    balance: IPointsBalance;\n    actions: IActions;\n}\n\ninterface IFieldValues {\n    points: number;\n    worth: number;\n}\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst PointsRedeem = (props: IProps) => {\n    const { balance, actions } = props;\n    const {\n        labels,\n        currency_ratio,\n        redeem_ratio,\n        currency_symbol,\n        coupon_expire_period,\n        minimum_points_redeem,\n        maximum_points_redeem,\n        decimals,\n    } = lpfwMyPoints;\n    const [pointsValue, setPointsValue]: [number|string, any] = useState(0);\n    const [worthValue, setWorthValue]: [number|string, any] = useState(0);\n    const [loading, setLoading]: [boolean, any] = useState(false);\n    const worthStep = (1/redeem_ratio) * currency_ratio;\n\n    useEffect(() => {\n        actions.readPointsBalance({});\n    }, []);\n\n    if (!balance) {\n        return <Skeleton active />;\n    }\n\n    /**\n     * When maximum points allowed for each coupon redemption setting value is greater than 0, then the maximum points\n     * is either the customers points balance or the value in the setting, whichever has a lower value.\n     * When the setting value is set to 0, maximum will just be set to customer's total points balance.\n     */\n    const maxPoints = 0 < maximum_points_redeem ? Math.min(balance.points, maximum_points_redeem) : balance.points;\n\n    /**\n     * Calculate amount worth based on the provided points value.\n     * \n     * @param value\n     * @returns \n     */\n    const calculateAmountFromPoints = (value: string | number | undefined) => {\n        if (typeof value === \"undefined\") return;\n        value = typeof value === \"string\" ? parseInt(value) : value;\n        if (value < minimum_points_redeem) return;\n\n        let points: number =\n            typeof value === \"string\" ? parseInt(value) : value;\n\n        points = Math.min(points, balance.points);\n        let temp = (points / redeem_ratio) * currency_ratio;\n\n        if ( isNaN(temp) ) {\n            temp = 0;\n            points = 0;\n        }\n\n        setWorthValue(temp.toFixed(decimals));\n        setPointsValue(parseInt(points.toString()));\n    };\n\n    /**\n     * Calculate points value based on the set amount.\n     * \n     * @param value\n     * @returns \n     */\n    const calculatePointsFromAmount = (value: string | number | undefined) => {\n        if (typeof value === \"undefined\") return;\n        let worth = typeof value === \"string\" ? parseFloat(value) : value;\n        if (worth < 0) return;\n\n        let temp: number = Math.floor((worth / currency_ratio) * redeem_ratio);\n\n        temp = Math.min(temp, balance.points);\n        worth = (temp / redeem_ratio) * currency_ratio;\n\n        if ( isNaN( temp ) ) {\n            worth = 0;\n            temp = 0;\n        }\n\n        setPointsValue(parseInt(temp.toString()));\n        setWorthValue(worth.toFixed(decimals));\n    };\n\n    const redeemPoints = () => {\n        setLoading(true);\n        actions.redeemPoints({\n            points: pointsValue,\n            successCB: (response: any) => {\n                setWorthValue(0.0);\n                setPointsValue(0);\n                setLoading(false);\n                message.success( response.data.message );\n            },\n            failCB: ({error}) => {\n                setLoading(false);\n                message.error( error.response.data.message );\n            }\n        });\n    };\n\n    return (\n        <div className=\"points-redeem\">\n            <h3>{labels.redeem_points}</h3>\n            <p>{labels.redeem_desc}</p>\n            <PointsWorth balance={balance} />\n            <Row className=\"form-wrap\" gutter={10}>\n                <Col span={11}>\n                    <label>{labels.enter_points}:</label>\n                    <InputNumber\n                        min={minimum_points_redeem}\n                        max={maxPoints}\n                        step={1}\n                        value={pointsValue}\n                        onChange={calculateAmountFromPoints}\n                    />\n                </Col>\n                <Col span={1}>\n                    <span className=\"equal-sign\">{`=`}</span>\n                </Col>\n                <Col span={11}>\n                    <label>\n                        {labels.enter_amount} ({currency_symbol}):\n                    </label>\n                    <InputNumber\n                        min={0}\n                        step={worthStep.toFixed(decimals)}\n                        value={worthValue}\n                        onChange={calculatePointsFromAmount}\n                    />\n                </Col>\n                <Col span={24}>\n                    <Button\n                        loading={loading}\n                        type=\"primary\"\n                        size=\"large\"\n                        onClick={redeemPoints}\n                        disabled={!pointsValue || minimum_points_redeem > pointsValue}\n                    >\n                        {labels.redeem_button}\n                    </Button>\n                    <span className=\"view-redeemed-link\">\n                        <Link to={`${pathPrefix}lpfw-my-points/?tab=balance`}>\n                            {labels.view_redeemed}\n                        </Link>\n                    </span>\n                </Col>\n            </Row>\n            {0 < coupon_expire_period ? (\n                <div\n                    className=\"expiry-note\"\n                    dangerouslySetInnerHTML={{ __html: labels.additional_info.replace('{date_expire}', balance.expiry) }}\n                />\n            ) : null}\n        </div>\n    );\n};\n\nconst mapStateToProps = (store: IStore) => ({ balance: store.balance });\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    actions: bindActionCreators({ readPointsBalance, redeemPoints }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PointsRedeem);\n\n// #endregion [Component]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { Tabs } from \"antd\";\n\n// Components\nimport PointsBalance from \"./PointsBalance\";\nimport PointsHistory from \"./PointsHistory\";\nimport PointsRedeem from \"./PointsRedeem\";\n\n// Helpers\nimport { getPathPrefix } from \"../helpers/utils\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var lpfwMyPoints: any;\n\nconst { TabPane } = Tabs;\n\n// #endregion [Variables]\n\n// #region [Interfaces]=================================================================================================\n\n// #endregion [Interfaces]\n\n// #region [Component] =================================================================================================\n\nconst App = () => {\n    const [tab, setTab]: [string, any] = useState(\"\");\n    const { labels } = lpfwMyPoints;\n    const urlParams = new URLSearchParams(useLocation().search);\n    const history = useHistory();\n    const urlTab = urlParams.get(\"tab\");\n    const pathPrefix = getPathPrefix();\n\n    const tabs = [\"balance\", \"history\", \"redeem\"];\n\n    useEffect(() => setTab(urlTab ? urlTab : \"balance\"), [urlTab]);\n\n    // handle tab click event\n    const handleTabClick = (key: string) => {\n        setTab(key);\n        history.push(`${pathPrefix}lpfw-my-points/?tab=${key}`);\n    };\n\n    return (\n        <Tabs\n            activeKey={tab}\n            defaultActiveKey={tab}\n            onTabClick={handleTabClick}\n        >\n            <TabPane tab={labels.points_balance} key=\"balance\">\n                <PointsBalance />\n            </TabPane>\n            <TabPane tab={labels.points_history} key=\"history\">\n                <PointsHistory />\n            </TabPane>\n            <TabPane tab={labels.redeem_points} key=\"redeem\">\n                <PointsRedeem />\n            </TabPane>\n        </Tabs>\n    );\n};\n\nexport default App;\n\n// #endregion [Component]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport enUS from \"antd/lib/locale/en_US\";\nimport enGB from \"antd/lib/locale/en_GB\";\nimport frFR from \"antd/lib/locale/fr_FR\";\nimport ruRU from \"antd/lib/locale/ru_RU\";\nimport ptBR from \"antd/lib/locale/pt_BR\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\ndeclare var lpfwMyPoints: any;\n\n// #endregion [Variables]\n\n// #region [Functions] =================================================================================================\n\nexport const getAntdLocale = () => {\n    const { app_lang } = lpfwMyPoints;\n\n    if (\"en_GB\" === app_lang) {\n        return enGB;\n    }\n\n    if (app_lang.includes(\"fr_\")) {\n        return frFR;\n    }\n\n    if (app_lang.includes(\"_RU\")) {\n        return ruRU;\n    }\n\n    if (app_lang.includes(\"pt_\")) {\n        return ptBR;\n    }\n\n    return enUS;\n};\n\n// #endregion [Functions]\n","// #region [Imports] ===================================================================================================\n\n// Libraries\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport {ConfigProvider} from \"antd\";\n\n// Store\nimport initializeStore from \"./store\";\n\n// CSS\nimport \"./antd.scss\";\nimport \"./index.scss\";\n\n// Components\nimport App from \"./components/App\";\n\n// Helpers\nimport { getPathPrefix } from \"./helpers/utils\";\nimport { getAntdLocale } from \"./helpers/antd\";\n\n// #endregion [Imports]\n\n// #region [Variables] =================================================================================================\n\n// Initialize redux store.\nconst store = initializeStore();\n\nconst pathPrefix = getPathPrefix();\n\n// #endregion [Variables]\n\n// #region [Component] =================================================================================================\n\ndocument\n    .querySelectorAll(\"#lpfw_my_points_app\")\n    .forEach((domContainer: any) => {\n        ReactDOM.render(\n            <Provider store={store}>\n                <ConfigProvider locale={getAntdLocale()}>\n                    <BrowserRouter>\n                        <Route\n                            path={`${pathPrefix}lpfw-my-points/`}\n                            component={App}\n                        />\n                    </BrowserRouter>\n                </ConfigProvider>\n            </Provider>,\n            domContainer\n        );\n    });\n\n// #endregion [Component]\n"],"sourceRoot":""}